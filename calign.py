#!/usr/bin/env python3

import argparse
import os
import subprocess
from glob import glob
from concurrent.futures import ProcessPoolExecutor, as_completed
import csv

def arguments():

    parser = argparse.ArgumentParser()

    parser.add_argument('--core-calls', required=True, metavar='FILE',
                        help='CSV of allele calls')

    parser.add_argument('--unaligned', required=True, metavar='DIR',
                        help='Directory of unaligned alleles')

    parser.add_argument('--aligned', required=True, metavar='DIR',
                        help='Directory to contain the aligned alleles')

    parser.add_argument('--snps', required=True, metavar='DIR',
                        help='Directory to contain alignments \
                              with uninformative residues removed')

    parser.add_argument('--concatenomes', required=True, metavar='DIR',
                        help='Directory to contain output concatenomes')

    return parser.parse_args()

def align_gene(unaligned):

    cmd = ('mafft', '--thread', '1', '--maxiterate', '1000', '--globalpair', unaligned)

    return subprocess.check_output(cmd)

def align_genes(unaligned_dir, aligned_dir, cores):

    def aln_out_path(unaln):
        return os.path.join(aligned_dir, basename(unaln) + '.aln')

    genes = contents(unaligned_dir)

    with ProcessPoolExecutor(cores) as ppe:

        aln_futures = {ppe.submit(align_gene, unaln): aln_out_path(unaln) for unaln in genes}

        for result in as_completed(aln_futures):
            aln_path = aln_futures[result]

            try:
                with open(aln_path, 'w') as f:
                    f.write(result)
            except Exception as e:
                print('Exception {} generated by {}'.format(e, aln_path))

def basename(path):

    name, _ = os.path.splitext(os.path.basename(path))
    return name

def contents(path, pattern=''):

    return glob(os.path.join(path, '*' + pattern))

def generate_SNPified_genes(aln_dir, snp_dir):

    for gene in contents(aln_dir, '.aln'):

        snp_path = os.path.join(snp_dir, basename(gene) + '.snp')

        with open(gene, 'r') as f:

            alleles = [str(a.seq) for a in SeqIO.parse(f,'fasta')]

        snps = filter_uninformative(alleles)

        with open(snp_path, 'a') as o:
            for name, seq in enumerate(snps):
                o.write('>{}\n{}\n'.format(name + 1, seq))

def filter_uninformative(alleles):

    informative = (x for x in zip(*alleles) if len(set(x)) is not 1 and '-' not in x)
    return tuple(zip(*informative))

def reconstitute_SNPome(informative_genes, core_calls):

    def calls():

        with open(core_calls, newline='', mode='r') as f:

            reader = csv.reader(f)
            header = next(reader, delimiter=',')

            # 'genome': [calls]
            return  {line[0]: line[1:] for line in reader}

    def reconstitute_genome():
        pass
